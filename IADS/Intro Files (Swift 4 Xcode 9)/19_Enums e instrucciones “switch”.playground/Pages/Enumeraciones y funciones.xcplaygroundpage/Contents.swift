/*:
 ## Enumeraciones y funciones
 
 Los valores de las enums se pueden usar como par√°metros o valores de devoluci√≥n para funciones, de la misma manera que cualquier otro tipo. 
 
 Aqu√≠ est√° la enum `LunchChoice` (opci√≥n de almuerzo) con la que estuviste trabajando:
*/
enum LunchChoice {
    case pasta, burger, soup
}
//: Podr√≠as volver a escribir la funci√≥n `cookLunch` (cocinar almuerzo) que usaste antes:
func cookLunch(_ choice: LunchChoice) -> String {
    
    if choice == .pasta {
        return "üçù"
    } else if choice == .burger {
        return "üçî"
    } else {
        return "üç≤"
    }
}

cookLunch(.burger)
//: - experiment:(Experimento): \
//:Llama a la funci√≥n algunas veces m√°s y especifica distintas opciones de comida.



/*:
 Usar la enum `LunchChoice` en lugar de una cadena soluciona los problemas que ten√≠a esta funci√≥n cuando tomaba un valor `String`. No se puede saber qu√© hab√≠a en el men√∫.
 
 Cuando llamas a la funci√≥n, sabes que debes especificar una enum `LunchChoice`. En el completado autom√°tico, se indican exactamente cu√°les son las opciones. No puedes especificar nada que no est√© en la lista, por lo que siempre obtienes lo que est√°s buscando.
 
 Pero la funci√≥n a√∫n podr√≠a ser mejor.

[Anterior](@previous)  |  P√°gina 7 de 21  |  [Siguiente: El problema de las instrucciones condicionales ‚Äúif‚Äù](@next)
*/
 
